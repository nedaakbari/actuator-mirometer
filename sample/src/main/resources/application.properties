spring.application.name=sample


#####jpa
spring.datasource.username=postgres
spring.datasource.password=1373
spring.datasource.url=jdbc:postgresql://localhost:5432/actuator
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true

###actuator
#the only two available by default are /health and /info.
#for enable all
management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.include=health,info,metrics

#for enable specific
#management.endpoint.beans.enabled=true
#management.endpoint.shutdown.enabled=true

#Health Groups
#???? ??? ?? ??? ??????
#management.endpoint.health.group.custom.include=diskSpace,ping
#????? ?????? ?????
management.endpoint.health.group.custom.show-components=always
management.endpoint.health.group.custom.show-details=always
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always

#Metrics





#Predefined Endpoints
#Let?s examine the available endpoints. Some have been added, others removed, and several have been restructured:
#/auditevents=> lists security audit-related events such as user login/logout. Also, we can filter by principal or type among other fields.
#/beans=>returns all available beans in our BeanFactory. Unlike /auditevents, it doesn?t support filtering.
#/conditions, =>formerly known as /autoconfig, builds a report of conditions around autoconfiguration.
#/configprops =>>allows us to fetch all @ConfigurationProperties beans.
#/env =>returns the current environment properties. Additionally, we can retrieve single properties.
#/flyway=> provides details about our Flyway database migrations.
#/health =>summarizes the health status of our application.
#/heapdump builds and returns a heap dump from the JVM used by our application.
#/info returns general information. It might be custom data, build information or details about the latest commit.
#/liquibase behaves like /flyway but for Liquibase.
#/logfile returns ordinary application logs.
#/loggers enables us to query and modify the logging level of our application.
#/metrics details metrics of our application. This might include generic metrics as well as custom ones.
#/prometheus returns metrics like the previous one, but formatted to work with a Prometheus server.
#/scheduledtasks provides details about every scheduled task within our application.
#/sessions lists HTTP sessions, given we are using Spring Session.
#/shutdown performs a graceful shutdown of the application.
#/threaddump dumps the thread information of the underlying JVM.